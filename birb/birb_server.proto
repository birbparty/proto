syntax = "proto3";

import "google/protobuf/timestamp.proto";

option csharp_namespace = "BirbParty.Grpc";
option go_package = "github.com/birbparty/proto/birb";

// Define what it means to be a birb
service Birb {
  rpc GetGameState (GameStateRequest) returns (GameState);
  rpc Execute (ExecuteRequest) returns (ExecuteResponse);
  rpc GetValue (GetValueRequest) returns (GetValueResponse);
}

// Define the api available to birbs
service Api {
  rpc GetGameState (GetGameStateRequest) returns (GameState);
}

// Define the cache available to birbs
service Cache {
  rpc Get (GetRequest) returns (GetResponse);
  rpc Set (SetRequest) returns (SetResponse);
}

enum PlayerStatus {
    Idle = 0;
    Waiting = 1;
    Active = 10;
}

enum SessionStatus {
    Lobby = 0;
    WaitingOnPlayer = 1;
    WaitingOnServerToStart = 2;
    Playing = 10;
    PlayingWaitingOnPlayer = 11;
    PlayingWaitingOnServer = 12;
    Finished = 50;
}

message BirbEvent {
    optional int64 id = 1;
    int64 playerId = 2;
    int64 eventType = 3;
    optional bytes eventData = 6;
    optional google.protobuf.Timestamp createdAt = 5;
}

message BirbPlayer {
    int64 id = 1;
    int64 ownerId = 2;
    string name = 3;
    bool ai = 4;
    optional int64 state = 5;
}

message GameState {
    int64 seed = 1;
    SessionStatus status = 2;
    repeated PlayerState playerStates = 3;
    repeated int64 WaitingOnIds = 4;
    bytes stateData = 6;
}

message GameStateRequest {
    int64 seed = 1;
    repeated BirbPlayer players = 2;
}

message GetGameStateRequest {
    int64 gameSessionId = 1;
}

message PlayerState {
    int64 playerId = 1;
    PlayerStatus status = 2;
    bytes stateBytes = 5;
    repeated BirbEvent availableOptions = 4;
}

message ExecuteRequest {
    int64 gameId = 1;
    BirbEvent event = 3;
    GameState gameState = 4;
}

message ExecuteResponse {
    optional GameState gameState = 1;
    optional string error = 2;
    bool success = 3;
}

message GetValueRequest {
    int64 gameId = 1;
    int64 ownerId = 2;
    string type = 3;
    optional bytes query = 4;
}

message GetValueResponse {
    optional bytes value = 1;
    optional string error = 2;
    bool success = 3;
}

message GetRequest {
    string key = 1;
}

message GetResponse {
    optional bytes value = 1;
    bool success = 2;
}

message SetRequest {
    string key = 1;
    bytes value = 2;
    optional int64 ttl = 3;
}

message SetResponse {
    bool success = 1;
}
