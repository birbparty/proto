// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: birb/birb_server.proto

package birb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Birb_GetGameState_FullMethodName   = "/Birb/GetGameState"
	Birb_ValidateAction_FullMethodName = "/Birb/ValidateAction"
)

// BirbClient is the client API for Birb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BirbClient interface {
	GetGameState(ctx context.Context, in *GameStateRequest, opts ...grpc.CallOption) (*GameState, error)
	ValidateAction(ctx context.Context, in *ValidateActionRequest, opts ...grpc.CallOption) (*ValidationResponse, error)
}

type birbClient struct {
	cc grpc.ClientConnInterface
}

func NewBirbClient(cc grpc.ClientConnInterface) BirbClient {
	return &birbClient{cc}
}

func (c *birbClient) GetGameState(ctx context.Context, in *GameStateRequest, opts ...grpc.CallOption) (*GameState, error) {
	out := new(GameState)
	err := c.cc.Invoke(ctx, Birb_GetGameState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birbClient) ValidateAction(ctx context.Context, in *ValidateActionRequest, opts ...grpc.CallOption) (*ValidationResponse, error) {
	out := new(ValidationResponse)
	err := c.cc.Invoke(ctx, Birb_ValidateAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BirbServer is the server API for Birb service.
// All implementations must embed UnimplementedBirbServer
// for forward compatibility
type BirbServer interface {
	GetGameState(context.Context, *GameStateRequest) (*GameState, error)
	ValidateAction(context.Context, *ValidateActionRequest) (*ValidationResponse, error)
	mustEmbedUnimplementedBirbServer()
}

// UnimplementedBirbServer must be embedded to have forward compatible implementations.
type UnimplementedBirbServer struct {
}

func (UnimplementedBirbServer) GetGameState(context.Context, *GameStateRequest) (*GameState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameState not implemented")
}
func (UnimplementedBirbServer) ValidateAction(context.Context, *ValidateActionRequest) (*ValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAction not implemented")
}
func (UnimplementedBirbServer) mustEmbedUnimplementedBirbServer() {}

// UnsafeBirbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BirbServer will
// result in compilation errors.
type UnsafeBirbServer interface {
	mustEmbedUnimplementedBirbServer()
}

func RegisterBirbServer(s grpc.ServiceRegistrar, srv BirbServer) {
	s.RegisterService(&Birb_ServiceDesc, srv)
}

func _Birb_GetGameState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirbServer).GetGameState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Birb_GetGameState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirbServer).GetGameState(ctx, req.(*GameStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Birb_ValidateAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirbServer).ValidateAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Birb_ValidateAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirbServer).ValidateAction(ctx, req.(*ValidateActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Birb_ServiceDesc is the grpc.ServiceDesc for Birb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Birb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Birb",
	HandlerType: (*BirbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameState",
			Handler:    _Birb_GetGameState_Handler,
		},
		{
			MethodName: "ValidateAction",
			Handler:    _Birb_ValidateAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "birb/birb_server.proto",
}
